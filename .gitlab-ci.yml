variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GET_SOURCES_ATTEMPTS: 5
    GIT_STRATEGY: fetch

before_script:
    - source /home/share/devtools/env.sh

stages:
    - build_ux600
    - build_ux600fd
    - run_ux600
    - run_ux600fd

cache:
    paths:
        - buildroot/dl

## Job template for build linux sdk
.build_linux_sdk_template: &build_linux_sdk_job_def
    interruptible: true
    only:
        changes:
          - conf/*
          - Makefile
          - .gitlab-ci.yml
          - buildroot
          - freeloader
          - linux
          - u-boot
    artifacts:
        name: "bootimages-${SOC}-${CORE}-${BOOT_MODE}-${CI_COMMIT_SHA::8}"
        paths:
            - work/${SOC}/boot.zip
            - work/${SOC}/opensbi/platform/nuclei/
            - work/${SOC}/freeloader/freeloader.elf
            - work/${SOC}/run_qemu.sh
            - work/${SOC}/disk.img
            - work/${SOC}/freeloader_qemu.elf
            - work/${SOC}/buildstamp.txt
            - build_*.log.*
        expire_in: 2 day
    tags:
        - env::native
        - host::xls01
    script:
        - echo ">>Clean previous build workspace"
        - make clean
        - echo ">>Show help message for $SOC - $CORE - $BOOT_MODE"
        - make help
        - echo ">>Build buildroot_initramfs_sysroot for $CORE"
        - |
            make -j buildroot_initramfs_sysroot > >(tee build_sysroot.log |grep '>>>') || {
                echo 'Show last 200 lines of build log'
                tail -n 200 build_sysroot.log
                xz -f -z build_sysroot.log
                exit 1
            }
        - xz -f -z build_sysroot.log
        - echo ">>Build freeloader for $SOC - $CORE - $BOOT_MODE"
        - |
            make freeloader > >(tee build_freeloader.log) || {
                xz -f -z build_freeloader.log
                exit 1
            }
        - xz -f -z build_freeloader.log
        - echo ">>Build and generate boot images for $SOC - $CORE - $BOOT_MODE"
        - |
            make preboot && make -j bootimages > >(tee build_bootimages.log) || {
                xz -f -z build_bootimages.log
                exit 1
            }
        - xz -f -z build_bootimages.log
        - |
            echo ">>Build and generate qemu images for $SOC - $CORE - $BOOT_MODE"
            echo ">>> Apply workaround: change TIMERCLK_FREQ from 32768 to 1000000"
            sed -i "s/32768/1000000/" conf/$SOC/*.dts
            make freeloader
            QEMU_FREELOADER=work/$SOC/freeloader_qemu.elf
            cp work/$SOC/freeloader/freeloader.elf $QEMU_FREELOADER
            make -j DISK_SIZE=128 gendisk > >(tee build_qemu_disk.log) || {
                xz -f -z build_qemu_disk.log
                exit 1
            }
            echo ">>> Reset workaround and source code, and rebuilt freeloader and boot images"
            git reset --hard
            make genboot
            xz -f -z build_qemu_disk.log
        - |
            RUNQEMUSH=work/$SOC/run_qemu.sh
            echo "qemu-system-riscv64 -M nuclei_u,download=flashxip -cpu nuclei-ux900fd,ext=$ARCH_EXT -smp 8 -m 256M -bios freeloader_qemu.elf -nographic -drive file=disk.img,if=sd,format=raw" > $RUNQEMUSH
            chmod +x $RUNQEMUSH
        - |
            if [ "x$SOC" != "xdemosoc" ] ; then
                echo ">>Will not build xlspike simulation images"
                exit 0
            fi
            echo ">>Build simulation target for $SOC - $CORE - $BOOT_MODE"
            make presim && make -j opensbi_sim > >(tee build_opensbi_payload.log) || {
                xz -f -z build_opensbi_payload.log
                exit 1
            }
            xz -f -z build_opensbi_payload.log

## Job template for run linux in xlspike
.run_linux_sdk_xlspike_template: &run_linux_sdk_xlspike_job_def
    interruptible: true
    only:
        changes:
          - conf/*
          - Makefile
          - .gitlab-ci.yml
          - buildroot
          - freeloader
          - linux
          - u-boot
    tags:
        - env::native
        - host::xls01
    script:
        - |
            if [ "x$SOC" != "xdemosoc" ] ; then
                echo ">>Will not run xlspike simulation for $SOC"
                exit 0
            fi
            timeout --foreground -s SIGKILL 12m xl_spike work/${SOC}/opensbi/platform/nuclei/${SOC}/firmware/fw_payload.elf > >(tee run_xlspike.log) || {
                if cat run_xlspike.log | grep "Run /init" ; then echo "Kernel boot successfully" ; else echo "Kernel boot failed" && exit 1; fi;
                if cat run_xlspike.log | grep "Welcome to" ; then echo "Pass simulation" && exit 0; else echo "Failed init process" && exit 1; fi;
            }

## Job template for run linux in qemu
.run_linux_sdk_qemu_template: &run_linux_sdk_qemu_job_def
    interruptible: true
    only:
        changes:
          - conf/*
          - Makefile
          - .gitlab-ci.yml
          - buildroot
          - freeloader
          - linux
          - u-boot
    tags:
        - env::native
        - host::xls01
    script:
        - echo ">>Run using qemu for $SOC - $CORE - $BOOT_MODE"
        - |
            if [ "x$SOC" != "xdemosoc" ] ; then
                echo ">>Will not run qemu simulation for $SOC"
                exit 0
            fi
            cd work/$SOC
            # $(cat run_qemu.sh) is workaround for directly run bash run_qemu.sh
            # If do kill it will just kill bash process, the qemu process is not killed
            # SIGTERM is better for kill qemu
            timeout --foreground -s SIGTERM 4m $(cat run_qemu.sh) > >(tee run_qemu.log) || {
                if cat run_qemu.log | grep "Run /init" ; then echo "Kernel boot successfully" ; else echo "Kernel boot failed" && exit 1; fi;
                if cat run_qemu.log | grep "Welcome to" ; then echo "Pass simulation" && exit 0; else echo "Failed init process" && exit 1; fi;
            }

## Job for build sdk
# Build For UX600 Core, without FPU, flash boot mode
build_ux600_flash:
    stage: build_ux600
    variables:
        SOC: "demosoc"
        CORE: "ux600"
        ARCH_EXT: ""
        BOOT_MODE: "flash"
    parallel:
        matrix:
            - SOC: ["demosoc", "evalsoc"]
    <<: *build_linux_sdk_job_def

## Job for build sdk
# Build For UX600 Core, without FPU, sd boot mode
build_ux600_sd:
    stage: build_ux600
    variables:
        SOC: "demosoc"
        CORE: "ux600"
        ARCH_EXT: ""
        BOOT_MODE: "sd"
    parallel:
        matrix:
            - SOC: ["demosoc", "evalsoc"]
    <<: *build_linux_sdk_job_def

## Job for run sim
# Run For UX600 Core, without FPU, flash boot mode
run_ux600_flash_xlspike:
    stage: run_ux600
    dependencies:
        - build_ux600_flash
    variables:
        SOC: "demosoc"
        CORE: "ux600"
        BOOT_MODE: "flash"
    <<: *run_linux_sdk_xlspike_job_def

## Job for run sim
# Run For UX600 Core, without FPU, sd boot mode
run_ux600_sd_xlspike:
    stage: run_ux600
    dependencies:
        - build_ux600_sd
    variables:
        SOC: "demosoc"
        CORE: "ux600"
        BOOT_MODE: "sd"
    <<: *run_linux_sdk_xlspike_job_def

## Job for run qemu
# Run For UX600 Core, without FPU, flash boot mode
run_ux600_flash_qemu:
    stage: run_ux600
    dependencies:
        - build_ux600_flash
    variables:
        SOC: "demosoc"
        CORE: "ux600"
        BOOT_MODE: "flash"
    <<: *run_linux_sdk_qemu_job_def

## Job for run qemu
# Run For UX600 Core, without FPU, sd boot mode
run_ux600_sd_qemu:
    stage: run_ux600
    dependencies:
        - build_ux600_sd
    variables:
        SOC: "demosoc"
        CORE: "ux600"
        BOOT_MODE: "sd"
    <<: *run_linux_sdk_qemu_job_def

## Job for build sdk
# Build For UX600FD Core, with FPU, flash boot mode
build_ux600fd_flash:
    stage: build_ux600fd
    dependencies:
    variables:
        SOC: "demosoc"
        CORE: "ux600fd"
        ARCH_EXT: ""
        BOOT_MODE: "flash"
    parallel:
        matrix:
            - SOC: ["demosoc", "evalsoc"]
    <<: *build_linux_sdk_job_def

## Job for build sdk
# Build For UX600FD Core, with FPU, sd boot mode
build_ux600fd_sd:
    stage: build_ux600fd
    dependencies:
    variables:
        SOC: "demosoc"
        CORE: "ux600fd"
        ARCH_EXT: ""
        BOOT_MODE: "sd"
    parallel:
        matrix:
            - SOC: ["demosoc", "evalsoc"]
    <<: *build_linux_sdk_job_def

## Job for run sim
# Run For UX600FD Core, with FPU, flash boot mode
# This ux600fd init process will fail
run_ux600fd_flash_xlspike:
    stage: run_ux600fd
    allow_failure: true
    dependencies:
        - build_ux600fd_flash
    variables:
        SOC: "demosoc"
        CORE: "ux600fd"
        BOOT_MODE: "flash"
    <<: *run_linux_sdk_xlspike_job_def

## Job for run sim
# Run For UX600FD Core, with FPU, sd boot mode
# This ux600fd init process will fail
run_ux600fd_sd_xlspike:
    stage: run_ux600fd
    allow_failure: true
    dependencies:
        - build_ux600fd_sd
    variables:
        SOC: "demosoc"
        CORE: "ux600fd"
        BOOT_MODE: "sd"
    <<: *run_linux_sdk_xlspike_job_def

## Job for run qemu
# Run For UX600FD Core, with FPU, flash boot mode
# This ux600fd init process will fail
run_ux600fd_flash_qemu:
    stage: run_ux600fd
    allow_failure: true
    dependencies:
        - build_ux600fd_flash
    variables:
        SOC: "demosoc"
        CORE: "ux600fd"
        BOOT_MODE: "flash"
    <<: *run_linux_sdk_qemu_job_def

## Job for run qemu
# Run For UX600FD Core, with FPU, sd boot mode
# This ux600fd init process will fail
run_ux600fd_sd_qemu:
    stage: run_ux600fd
    allow_failure: true
    dependencies:
        - build_ux600fd_sd
    variables:
        SOC: "demosoc"
        CORE: "ux600fd"
        BOOT_MODE: "sd"
    <<: *run_linux_sdk_qemu_job_def
